{
  "openapi": "3.0.0",
  "info": {
    "title": "Role Based Access Control API",
    "version": "1.0.0",
    "description": "This is a REST API application made with Express. It retrieves data from JSONPlaceholder.",
    "license": {
      "name": "Licensed Under MIT",
      "url": "https://spdx.org/licenses/MIT.html"
    },
    "contact": {
      "name": "JSONPlaceholder",
      "url": "https://jsonplaceholder.typicode.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development server"
    }
  ],
  "paths": {
    "/login": {
      "post": {
        "summary": "Authentication user with username + password",
        "description": "Authenticate user with username + password and return the JWT access and refresh tokens",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credential"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtTokens"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credential"
          }
        }
      }
    },
    "/token": {
      "post": {
        "summary": "Refresh access token",
        "description": "Returns a new access token given a refresh token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The user has authenticated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccessToken"
                }
              }
            }
          },
          "401": {
            "description": "Invalid credential"
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "Logout user",
        "description": "Logout user using refresh token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshToken"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "The user has logged out successfully"
          }
        }
      }
    },
    "/register": {
      "post": {
        "summary": "Register new user",
        "description": "Register new user with username + password",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Credential"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The user has registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/JwtTokens"
                }
              }
            }
          },
          "400": {
            "description": "Email or password not provided. Cannot register user."
          },
          "409": {
            "description": "An account with this email already exists."
          }
        }
      }
    },
    "/projects": {
      "get": {
        "summary": "List user's projects",
        "description": "Returns a list of projects scoped to the user",
        "tags": [
          "Projects"
        ],
        "responses": {
          "200": {
            "description": "A list of projects",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    },
    "/projects/{id}": {
      "get": {
        "summary": "Get project by id",
        "description": "Returns a project with the specified ID",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Project",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "A project with the specified ID was not found."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      },
      "delete": {
        "summary": "Delete project by id",
        "description": "Delete a project with the specified ID",
        "tags": [
          "Projects"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Project ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Project deleted"
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "A project with the specified ID was not found."
          }
        },
        "security": [
          {
            "bearerAuth": []
          }
        ]
      }
    }
  },
  "components": {
    "schemas": {
      "Credential": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email"
          },
          "password": {
            "type": "string",
            "description": "User's password"
          }
        },
        "example": {
          "email": "john.doe@test.com",
          "password": "myStrongPassword"
        }
      },
      "JwtTokens": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          },
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token"
          }
        }
      },
      "AccessToken": {
        "type": "object",
        "properties": {
          "accessToken": {
            "type": "string",
            "description": "JWT access token"
          }
        }
      },
      "RefreshToken": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "JWT refresh token"
          }
        }
      },
      "Project": {
        "type": "object",
        "required": [
          "id",
          "name",
          "userEmail"
        ],
        "properties": {
          "id": {
            "type": "number",
            "description": "Project's id"
          },
          "name": {
            "type": "string",
            "description": "Project's name"
          },
          "userEmail": {
            "type": "string",
            "description": "User's email"
          }
        },
        "example": {
          "id": 1,
          "name": "John's project",
          "userEmail": "john.doe@test.com"
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Access token is missing or invalid"
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication API"
    },
    {
      "name": "Projects",
      "description": "Projects API"
    }
  ]
}